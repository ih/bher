;;this file contains all of the mcmc code that doesn't mess with states -- ie all of the stuff at the level of kernels and above.

;;what must be provided elsewhere:
;;counterfactual-update
;;structure handling: mcmc-state->xrp-draws, mcmc-state->score, mcmc-state->query-value.

;;NOTE: since these are church procedures, the xrp-list will accumulate draws due to accept/reject decisions and proposals. will this cause bad slowdown?

;;;kernels (mcmc transition distributions) and proposal distributions

;;  (define (abstraction-proposal-distribution state normal-form-proc)
;;  (let ([program (mcmc-state->query-value state)]
;;        [ret1 (abstraction-proposer program)]
;;        [new-program (first ret1)]
;;        [fw-prob (second ret1)]
;;        [bw-prob (third ret1)]
;;        [grammar (get-grammar state)]
;;        [grammar->random-choices (psmc-query grammar
                
;;        [ret2 (counterfactual-update state normal-form-proc
;; grammar->program-random-choices)]
;;        [proposal-state (first ret2)]
;;        [cd-bw/fw (second ret2)])
;;    (list (acceptance-prob cd-bw/fw fw-prob bw-prob) proposal-state)))




(define (basic-proposal-distribution state normal-form-proc)
  (if (addbox-empty? (mcmc-state->xrp-draws state))
      (list 0.0 state) ;;if no xrps have been drawn (eg all randomness in q-e) make trivial proposal. (still have to update..??)
      (let* ((chosen-xrp (rest (uniform-draw (addbox->alist (mcmc-state->xrp-draws state))))) ;;rest is because xrp-draws is an addbox, so address is first.
             [db (if (equal? (xrp-draw-name chosen-xrp) "grammar-xrp") (pretty-print (list "grammar xrp" chosen-xrp)) #f)]
             (ret1 ((xrp-draw-proposer chosen-xrp) state))

             (proposed-val (first ret1))
             (proposal-fw-score (second ret1))
             (proposal-bw-score (third ret1))
             ;;(db (pretty-print "basic-pd cfupdate"))
             (ret2 (counterfactual-update state normal-form-proc (pair chosen-xrp proposed-val)))
             (proposal-state (first ret2))
             (cd-bw/fw (second ret2))
             (ind-fw (- (log (addbox-size (mcmc-state->xrp-draws state)))))
             (ind-bw (- (log (addbox-size (mcmc-state->xrp-draws proposal-state))))) )
        (list (+ (- proposal-bw-score proposal-fw-score) cd-bw/fw (- ind-bw ind-fw)) proposal-state))))

;;FIXME!! this works badly... need constraint prop to do this right.
(define (rejection-initializer normal-form-proc)
  (let ((proposal-state (first (counterfactual-update (make-initial-mcmc-state) normal-form-proc)))) ;;don't care about bw/fw for init.
    (if (= -inf.0 (mcmc-state->score proposal-state))
        (rejection-initializer normal-form-proc)
        proposal-state)))

;; (define (test-initializer normal-form-proc)
;;   (let* ([te (lambda () (test-expr))]
;;          [init-state (make-initial-mcmc-state)]
;;          [test-state (list (first init-state) (pair 't te) (third init-state))])
;;          test-state))
        

(define verbose-init #f)

;; initialize using rejection on highest temp
;; then for each temp from high to low:
;; - rescore
;; - do rejuvenation steps
;; finally, check whether p != 0 (if 0, restart at top)
(define (annealing-initializer rej-steps temps:low->high temps->nfqp)
  (let* ([temps:high->low (reverse temps:low->high)]
         [normal-form-proc (apply temps->nfqp (first temps:high->low))]
         [initial-state (begin (reset-store-xrp-draws)
                               (rejection-initializer normal-form-proc))])
    (let next-temp ([temps (rest temps:high->low)]
                    [mcmc-state initial-state])
      (if (= -inf.0 (mcmc-state->score mcmc-state))
          (begin
            (when verbose-init
                  (display "annealing-initializer: failed, restarting at top ...\n"))
            (annealing-initializer rej-steps temps:low->high temps->nfqp))
          (if (null? temps)
              (begin
                (when verbose-init
                      (display "annealing-initializer: succeeded!\n"))
                mcmc-state)
              (begin
                (when verbose-init
                      (for-each display
                                (list "annealing-initializer:\n"
                                      "  temps remaining: " (length temps)
                                      "\n  current temp: " (first temps)
                                      "\n  current val: " (mcmc-state->query-value mcmc-state) "\n")))
                (let* ([nfqp (apply temps->nfqp (first temps))]
                       [rescored-state (first (counterfactual-update mcmc-state nfqp))]
                       [rej-state ((basic-repeat-kernel rej-steps nfqp) rescored-state)])
                  (next-temp (rest temps)
                             rej-state))))))))


;;basic MH kernel
;;the proposal distribution takes a current state and returns a list of bw-fw score and proposed state.
;;the scorer takes a state and returns the score.
(define (make-mh-kernel proposal-distribution scorer)
  (lambda (state)
    (let* ((ret (proposal-distribution state))
           (bw/fw (first ret))
           (proposal-state (second ret))
           (old-p (scorer state))
           (new-p (scorer proposal-state))
           (accept (log-flip (min 0.0 (+ (- new-p old-p) bw/fw))))
           ;(dummy (if accept (display "--accept--\n") (display "--reject--\n")))
           (dummy (reset-store-xrp-draws))) ;;FIXME!! this is to avoid accumulating xrp-draws...
      (if accept
          proposal-state
          state))))

;; ;; mixture kernel
;; (define (mixture-kernel cdf . kernels )
;;   (lambda (state)
;;     (let ((u (uniform)))
;;       (let loop ((kernels kernels)
;;                  (cdf cdf) )
;;         (if (<= u (car cdf))
;;             ((car kernels) state)
;;             (loop (cdr kernels)
;;                   (cdr cdf) ))))))

;; cycle kernel
(define (cycle-kernel . kernels)
  (lambda (state)
    (fold (lambda (k s) (k s)) state kernels)))

;; repeat a kernel
(define (repeat-kernel steps kernel)
  (apply cycle-kernel (make-list steps kernel)))

(define (basic-repeat-kernel steps nfqp)
  (repeat-kernel steps (make-mh-kernel (lambda (state) (basic-proposal-distribution state nfqp))
                                       mcmc-state->score)))

(define inference-timing #f)

;;;queries
(define (repeated-mcmc-query-core initializer kernel num-samples)
  (let* ([init-state (initializer)]
        [db (pretty-print (list "init state" (mcmc-state->query-value init-state)))])
    (when inference-timing
          (display "initialized: ")
          (display (current-date))
          (display "\n"))
    (let ([ret (mcmc-loop kernel init-state num-samples '())])
      (when inference-timing
            (display "done: ")
            (display (current-date))
            (display "\n"))
      ret)))

(define (mcmc-loop kernel state samples-left samples)
  (if (< samples-left 1)
      (reverse samples)
      (mcmc-loop kernel (kernel state) (- samples-left 1) (pair (mcmc-state->query-value state) samples))))

(define (mh-query samples lag normal-form-proc)
;;  (repeated-mcmc-query-core (lambda () (test-initializer normal-form-proc))
  (repeated-mcmc-query-core (lambda () (rejection-initializer normal-form-proc))
                            (basic-repeat-kernel lag normal-form-proc)
                            samples))

;; (define (mh-fixed-start samples lag normal-form-proc)
;;   (repeated-mcmc-query-core (lambda () (test-initializer normal-form-proc))
;;                             (basic-repeat-kernel lag normal-form-proc)
;;                             samples))

(define (mh-query/annealed-init temps samples lag rej-steps temps->nfqp)
  (let ([normal-form-proc (apply temps->nfqp (first temps))])
    (repeated-mcmc-query-core (lambda () (annealing-initializer rej-steps temps temps->nfqp))
                              (basic-repeat-kernel lag normal-form-proc)
                              samples)))


;;;
;;this is the code for psmc (population sequential monte carlo). this is particle filtering with an mcmc rejuvenation kernel and (eventually) a crossover move.
;;the sugarred call looks like (psmc-query temp-args temps popsize kernel-iterations ...defs... q-exp c-exp).
(define (psmc-query temps popsize lag temps->nfqp)
  (map mcmc-state->query-value (smc-core temps popsize lag temps->nfqp)))
 
;;this does the smc without finalizing, so that we can either get the query values or the scores (etc).
(define (smc-core temps popsize lag temps->nfqp)
  (let ([original-temps temps]) ;; used in case of collapse
    (let smc ((temps temps) ;;FIXME: rest temps?
              (population (repeat popsize (lambda () (begin
                                                       (reset-store-xrp-draws) ;;FIXME!! this is to avoid accumulating xrp-draws...
                                                       (rejection-initializer (apply temps->nfqp (first temps)))))))
              (weights (make-list popsize 0)))

      (let* (;;(dummy (display (map mcmc-state->query-value population))) (dummy (display "\n"))
             ;;step forward temps.
             ;;(db (pretty-print (list "the temp" (first temps))))
             (rets (map (lambda (state) (counterfactual-update state (apply temps->nfqp (first temps)))) population))

             ;;(db (pretty-print "after the cf"))
             (new-population (map first rets))
             (cd-bw/fw (map second rets))
             (weights (map (lambda (old-weight old-state new-state cd-bw/fw) (+ old-weight
                                                                                (- (mcmc-state->score new-state) (mcmc-state->score old-state))
                                                                                cd-bw/fw))
                           weights
                           population
                           new-population
                           cd-bw/fw))
             
             ;;resample and reset weights (optional).
             (resample-distribution (map exp (log-normalize weights)))
             (collapse? (nan? (first resample-distribution))))
        (if collapse?
            (let ([db (pretty-print (list "collapse!!!" popsize))])
              (smc-core original-temps (increase-population popsize) lag temps->nfqp))
            (let* ([new2-population
                    (repeat popsize (lambda ()
                                      (begin
                                        (reset-store-xrp-draws) ;;FIXME!! this is to avoid accumulating xrp-draws...
                                        (multinomial new-population resample-distribution))))]
                   [weights (make-list popsize 0)]
                   ;;rejuvenate using kernel.
                   [kernel (repeat-kernel lag (make-mh-kernel (lambda (state) (basic-proposal-distribution state (apply temps->nfqp (first temps))))
                                                              mcmc-state->score))]
                   [new3-population (map kernel new2-population)])
              (begin ;;(map (lambda (x y) (begin (display "  ")(display x)(display "  ")(display y)(display "\n")))
                ;;   (map mcmc-state->query-value new3-population)
                ;; (map mcmc-state->score new3-population))
                ;;(display "\n")
                ;;loop if there are any temps left.
                ;;      (if (or collapse? (null? (rest temps)))
                (if (null? (rest temps))
                    new3-population
                    (smc (rest temps) new3-population weights)))))))))

(define (increase-population old-pop-size)
  (* old-pop-size 2))

 (define (log-sum-exp . log-vals)
   (let* ([max-log-val (apply max log-vals)])
     (if (equal? max-log-val -inf.0)
         -inf.0
         (+ (log (exact->inexact (sum (map (lambda (val) (exp (- val max-log-val))) log-vals))))
            max-log-val))))

 (define (log-normalize log-scores)
   (let* ([score-sum (apply log-sum-exp log-scores)])
     (map (lambda (score) (- score score-sum)) log-scores)))