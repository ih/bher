;;this file contains all of the mcmc code that doesn't mess with states -- ie all of the stuff at the level of kernels and above.

;;what must be provided elsewhere:
;;counterfactual-update
;;structure handling: mcmc-state->xrp-draws, mcmc-state->score, mcmc-state->query-value.

;;NOTE: since these are church procedures, the xrp-list will accumulate draws due to accept/reject decisions and proposals. will this cause bad slowdown?

;;choose between doing the original proposal mechanism (choosing a random choice and resampling) or using a custom proposer attached to a procedure in the query



(define (basic-proposal-distribution state normal-form-proc)
  (let* ([xrp-draws (mcmc-state->xrp-draws state)]
         [with-proposer-calls (mcmc-state->with-proposer-calls state)])
    (cond [(and (none? xrp-draws) (none? with-proposer-calls)) (trivial-proposal state)]
          [(none? xrp-draws) (run-with-proposer with-proposer-calls state normal-form-proc)]
          [(none? with-proposer-calls) (run-xrp-proposer xrp-draws state normal-form-proc)]
          [else (if (flip)
                    (run-with-proposer with-proposer-calls state normal-form-proc)
                    (run-xrp-proposer xrp-draws state normal-form-proc))])))

(define none? addbox-empty?)

(define (addbox-draw-item addbox) (rest (uniform-draw (addbox->alist addbox))))

;;;returns a list of interventions needed to ensure with-proposer's proc has the value proposed by with-proposer's proposer
(define (run-with-proposer with-proposer-calls state nfqp)  ;;state is passed in to set the xrp-ticks in the interventions, might not be necessary
  (let* ([chosen (addbox-draw-item with-proposer-calls)]
         [old-value (lazy-list->all-list (with-proposer-call-value chosen))] ;;it'd be nice to abstract out the lazyness used here
         [new-value+scores ((with-proposer-call-proposer chosen) old-value)]
         [new-value (first new-value+scores)]
         [fw-prob (second new-value+scores)]
         [bw-prob (third new-value+scores)]
         [interventions (find-random-choices new-value chosen state)]
         [none (reset-with-proposer-calls state)]  ;;the counterfactual-update will make new with-proposer-calls
         [ret2 (apply counterfactual-update (append (list state nfqp) interventions))]
         [proposal-state (first ret2)])
    (list (- bw-prob fw-prob) proposal-state)))

(define (find-random-choices new-value chosen state)
  (let* ([new-value (list->lazy-list new-value)]
         [temps-nfqp (make-temps-nfqp new-value (with-proposer-call-proc chosen))]
         [depths (map list (iota (compute-depth new-value)))]
         [address (with-proposer-call-address chosen)]
         [states (smc-core depths 1 2 temps-nfqp '())]
         [xrp-draws (map rest (mcmc-state->xrp-draws (first states)))]  ;;assumes all states are the same
         [interventions (map (make-interventions address (get-xrp-ticks state)) xrp-draws)])
    interventions))

;; make a function that can make nfqps for the smc process
(define (make-temps-nfqp target-value proc)
  (lambda (temp)
    (lambda ()
      (begin
        (define p (proc))
        (pair (lazy-equal? p target-value temp) (lambda () (first (lazy-list->list p temp))))))))

  
(define (get-xrp-ticks mcmc-state)
  (let* ([draws-addbox (mcmc-state->xrp-draws mcmc-state)]
         [xrp-draw (rest (first draws-addbox))])
    (xrp-draw-ticks xrp-draw)))

;;modify an xrp-draw that was created during smc to have the right address and xrp-ticks and package it as an intervention for counterfactual-update
(define (make-interventions init-address state-xrp-ticks)
  (lambda (xrp-draw)
    (let* ([address (xrp-draw-address xrp-draw)]
           [new-address (adjust-address address init-address)]
           [new-xrp-draw (make-xrp-draw new-address
                                        (xrp-draw-value xrp-draw)
                                        (xrp-draw-name xrp-draw)
                                        (xrp-draw-proposer xrp-draw)
                                        state-xrp-ticks
                                        (xrp-draw-score xrp-draw)
                                        (xrp-draw-support xrp-draw))])
      (pair new-xrp-draw (xrp-draw-value xrp-draw)))))

(define (adjust-address address init-address)
  (append (drop-right address 1) init-address))

;;performs the original basic proposals
(define (run-xrp-proposer xrp-draws state nfqp)
  (let* ([chosen (addbox-draw-item xrp-draws)]
         [ret1 ((xrp-draw-proposer chosen) state)]
         [proposed-val (first ret1)]
         [proposal-fw-score (second ret1)]
         [proposal-bw-score (third ret1)]
         [ret2 (apply counterfactual-update (append (list state nfqp) (list (pair chosen proposed-val))))]
         [proposal-state (first ret2)]
         [cd-bw/fw (second ret2)]
         [ind-fw (- (log (addbox-size (mcmc-state->xrp-draws state))))]
         [ind-bw (- (log (addbox-size (mcmc-state->xrp-draws proposal-state))))])
    (list (+ (- proposal-bw-score proposal-fw-score) cd-bw/fw (- ind-bw ind-fw)) proposal-state)))

(define (trivial-proposal state) (list 0.0 state))

;;FIXME!! this works badly... need constraint prop to do this right.
(define (rejection-initializer normal-form-proc)
  (let ((proposal-state (first (counterfactual-update (make-initial-mcmc-state) normal-form-proc)))) ;;don't care about bw/fw for init.
    (if (= -inf.0 (mcmc-state->score proposal-state))
        (rejection-initializer normal-form-proc)
        (let ();[db (pretty-print "initial state chosen")])
        proposal-state))))

;; used when with-proposer is used (specifically by smc-core) to get random choices for a proposed value
(define (rejection-addressed-initializer normal-form-proc start-address)
    (let* ([init-state (make-addressed-initial-mcmc-state start-address)]
           [proposal-state (first (counterfactual-update init-state normal-form-proc))]) ;;don't care about bw/fw for init.
      (if (= -inf.0 (mcmc-state->score proposal-state))
          (rejection-addressed-initializer normal-form-proc start-address)
          proposal-state)))

;; used when the with-proposer procedure is a grammar  and we want to initialize the state to a particular expression
(define (expr-initializer normal-form-proc expr)
  (let* ([random-state (first (counterfactual-update (make-initial-mcmc-state) normal-form-proc))]
         [fixed-val-state (make-mcmc-state (mcmc-state->store random-state) (pair #t (lambda () expr)) (mcmc-state->address random-state))]
         [with-proposer-calls (mcmc-state->with-proposer-calls fixed-val-state)] ;;should contain single call due to exectution of cf-update
         [modified-proposer-calls (initializer-proposer-calls with-proposer-calls expr)]
         [init-state (second (run-with-proposer modified-proposer-calls fixed-val-state normal-form-proc))]
         )
    init-state))
;;sets the value of the proposer call to expr
(define (initializer-proposer-calls with-proposer-calls expr)
  (let* ([first-entry (first (addbox->alist with-proposer-calls))]
         [address (first first-entry)]
         [call (rest first-entry)]
         [new-call (make-with-proposer-call (with-proposer-call-address call)
                                            (list->lazy-list expr) ;;only thing that changed
                                            (with-proposer-call-proposer call)
                                            (with-proposer-call-proc call))]
         [new-proposer-calls (add-into-addbox (make-addbox) address new-call)])
    new-proposer-calls))

        

(define verbose-init #f)

;; initialize using rejection on highest temp
;; then for each temp from high to low:
;; - rescore
;; - do rejuvenation steps
;; finally, check whether p != 0 (if 0, restart at top)
(define (annealing-initializer rej-steps temps:low->high temps->nfqp)
  (let* ([temps:high->low (reverse temps:low->high)]
         [normal-form-proc (apply temps->nfqp (first temps:high->low))]
         [initial-state (begin (reset-store-xrp-draws)
                               (rejection-initializer normal-form-proc))])
    (let next-temp ([temps (rest temps:high->low)]
                    [mcmc-state initial-state])
      (if (= -inf.0 (mcmc-state->score mcmc-state))
          (begin
            (when verbose-init
                  (display "annealing-initializer: failed, restarting at top ...\n"))
            (annealing-initializer rej-steps temps:low->high temps->nfqp))
          (if (null? temps)
              (begin
                (when verbose-init
                      (display "annealing-initializer: succeeded!\n"))
                mcmc-state)
              (begin
                (when verbose-init
                      (for-each display
                                (list "annealing-initializer:\n"
                                      " temps remaining: " (length temps)
                                      "\n current temp: " (first temps)
                                      "\n current val: " (mcmc-state->query-value mcmc-state) "\n")))
                (let* ([nfqp (apply temps->nfqp (first temps))]
                       [rescored-state (first (counterfactual-update mcmc-state nfqp))]
                       [rej-state ((basic-repeat-kernel rej-steps nfqp) rescored-state)])
                  (next-temp (rest temps)
                             rej-state))))))))


;;basic MH kernel
;;the proposal distribution takes a current state and returns a list of bw-fw score and proposed state.
;;the scorer takes a state and returns the score.
(define (make-mh-kernel proposal-distribution scorer)
  (lambda (state)
    (let* ((ret (proposal-distribution state))
           (bw/fw (first ret))
           (proposal-state (second ret))
           (old-p (scorer state))
           (new-p (scorer proposal-state))
           (accept (log-flip (min 0.0 (+ (- new-p old-p) bw/fw))))
           ;(dummy (if accept (display "--accept--\n") (display "--reject--\n")))
           (dummy (reset-store-xrp-draws))) ;;FIXME!! this is to avoid accumulating xrp-draws...
      (if accept
          proposal-state
          state))))

;; ;; mixture kernel
;; (define (mixture-kernel cdf . kernels )
;; (lambda (state)
;; (let ((u (uniform)))
;; (let loop ((kernels kernels)
;; (cdf cdf) )
;; (if (<= u (car cdf))
;; ((car kernels) state)
;; (loop (cdr kernels)
;; (cdr cdf) ))))))

;; cycle kernel
(define (cycle-kernel . kernels)
  (lambda (state)
    (fold (lambda (k s) (k s)) state kernels)))

;; repeat a kernel
(define (repeat-kernel steps kernel)
  (apply cycle-kernel (make-list steps kernel)))

(define (basic-repeat-kernel steps nfqp)
  (repeat-kernel steps (make-mh-kernel (lambda (state) (basic-proposal-distribution state nfqp))
                                       mcmc-state->score)))

(define inference-timing #t)

;;;queries
(define (repeated-mcmc-query-core initializer kernel num-samples)
  (let* ([init-state (reset-with-proposer-calls (initializer))]
        [db (pretty-print (list "init state" (mcmc-state->query-value init-state) (length (mcmc-state->with-proposer-calls init-state))))])
    (when inference-timing
          (display "initialized: ")
          (display (current-date))
          (display "\n"))
    (let ([ret (mcmc-loop kernel init-state num-samples '())])
      (when inference-timing
            (display "done: ")
            (display (current-date))
            (display "\n"))
      ret)))

(define (mcmc-loop kernel state samples-left samples)
  (if (< samples-left 1)
      (reverse samples)
      (mcmc-loop kernel (kernel state) (- samples-left 1) (pair (mcmc-state->query-value state) samples))))

(define (mh-query samples lag normal-form-proc)
  (repeated-mcmc-query-core (lambda () (rejection-initializer normal-form-proc))
                            (basic-repeat-kernel lag normal-form-proc)
                            samples))

;;allows one to specify an initial expression as the starting state when the generative model is a grammar
(define (mh-expr-query samples lag normal-form-proc expr)
  (let ([db (pretty-print (list "in mh-expr-query" samples lag expr))])
  (repeated-mcmc-query-core (lambda () (expr-initializer normal-form-proc expr))
                            (basic-repeat-kernel lag normal-form-proc)
                            samples)))

(define (mh-query/annealed-init temps samples lag rej-steps temps->nfqp)
  (let ([normal-form-proc (apply temps->nfqp (first temps))])
    (repeated-mcmc-query-core (lambda () (annealing-initializer rej-steps temps temps->nfqp))
                              (basic-repeat-kernel lag normal-form-proc)
                              samples)))


;;;
;;this is the code for psmc (population sequential monte carlo). this is particle filtering with an mcmc rejuvenation kernel and (eventually) a crossover move.
;;the sugarred call looks like (psmc-query temp-args temps popsize kernel-iterations ...defs... q-exp c-exp).
(define (psmc-query temps popsize lag temps->nfqp)
  (map mcmc-state->query-value (smc-core temps popsize lag temps->nfqp)))
 
;;this does the smc without finalizing, so that we can either get the query values or the scores (etc).
(define (smc-core temps popsize lag temps->nfqp . start-address)
  (let ([original-temps temps]) ;; used in case of collapse
    (let smc ((temps temps) ;;FIXME: rest temps?
              (population (repeat popsize (lambda () (begin
                                                       (reset-store-xrp-draws) ;;FIXME!! this is to avoid accumulating xrp-draws...
                                                       (if (null? start-address)
                                                           (reset-with-proposer-calls (rejection-initializer (apply temps->nfqp (first temps))))
                                                           (reset-with-proposer-calls (rejection-addressed-initializer (apply temps->nfqp (first temps)) (first start-address))))

                                                       ))))
              (weights (make-list popsize 0)))

      (let* (;;(dummy (display (map mcmc-state->query-value population))) (dummy (display "\n"))
             ;;step forward temps.
             (rets (map (lambda (state) (counterfactual-update state (apply temps->nfqp (first temps)))) population))
             (new-population (map first rets))
             (cd-bw/fw (map second rets))
             (weights (map (lambda (old-weight old-state new-state cd-bw/fw) (+ old-weight
                                                                                (- (mcmc-state->score new-state) (mcmc-state->score old-state))
                                                                                cd-bw/fw))
                           weights
                           population
                           new-population
                           cd-bw/fw))
             
             ;;resample and reset weights (optional).
             (resample-distribution (map exp (log-normalize weights)))
             (collapse? (nan? (first resample-distribution))))
        (if collapse?
            (let ();;[db (pretty-print (list "collapse!!!" popsize))])
              (if (null? start-address)
                  (smc-core original-temps (increase-population popsize) lag temps->nfqp)
                  (smc-core original-temps (increase-population popsize) lag temps->nfqp (first start-address))))
            (let* ([new2-population
                    (repeat popsize (lambda ()
                                      (begin
                                        (reset-store-xrp-draws) ;;FIXME!! this is to avoid accumulating xrp-draws...
                                        (multinomial new-population resample-distribution))))]
                   [weights (make-list popsize 0)]
                   ;;rejuvenate using kernel.
                   [kernel (repeat-kernel lag (make-mh-kernel (lambda (state) (basic-proposal-distribution state (apply temps->nfqp (first temps))))
                                                              mcmc-state->score))]
                   [new3-population (map kernel new2-population)]
                   )
              (begin ;;(map (lambda (x y) (begin (display " ")(display x)(display " ")(display y)(display "\n")))
                 ;;(map mcmc-state->query-value new3-population)
                 ;;(map mcmc-state->score new3-population))
                ;;(display "\n")
                ;;loop if there are any temps left.
                ;; (if (or collapse? (null? (rest temps)))
                (if (null? (rest temps))
                    new3-population
                    (smc (rest temps) new3-population weights)))))))))

(define (increase-population old-pop-size)
  (* old-pop-size 2))


;;this version takes in a program to generate sexprs (as a sexpr) and compiles it before marginalizing.
(define (smc-eval-obs-marginalize gen-code popsize)
  (let* (;;[db (pretty-print (list "gen-code" gen-code))]
         (gen-sexpr (eval gen-code)))
         ;;[db (pretty-print (list "gen-sexrp" gen-sexpr))])
  (make-stateless-xrp
   'marginalized-eq-obs-gen-sexpr
   (lambda (obs) (lazy-equal? (gen-sexpr) obs)) ;;sampler
   (lambda (args val) ;;scorer
     (if val
         (let* ((samples (smc-core (map list (iota (+ 1 (lazy-list-size (first args))))) popsize 0
                                   (lambda (depth) (lambda () (let ((s (gen-sexpr)))
                                                                (pair (lazy-equal? s (first args) depth)
                                                                      (lambda () (first (lazy-list->list s depth)))))))))
                ;;remove duplicates in order to do selective model averaging:
                (samples (fold (lambda (s a) (if (member (mcmc-state->addrval s) (map mcmc-state->addrval a)) a (pair s a))) '() samples))
                (scores (map mcmc-state->score samples))
                ;;[db (pretty-print (list "individual scores" gen-code (lazy-list->all-list (first args)) (map exp scores)))]
                (score (if (null? scores)
                           -inf.0
                           (apply log-sum-exp scores)))) 
                           ;;(- (apply log-sum-exp scores) (log (length scores))))))
           
           score)
           ;;(begin (display (exp score))(display "\n") score))
         (log 0.9)) ;;FIXME!! proper scoring for being false?
     ))))




(define (mcmc-state->addrval s) (map (lambda (d) (pair (xrp-draw-address d) (xrp-draw-value d))) (mcmc-state->xrp-draws s)) )


 (define (log-sum-exp . log-vals)
   (let* ([max-log-val (apply max log-vals)])
     (if (equal? max-log-val -inf.0)
         -inf.0
         (+ (log (exact->inexact (sum (map (lambda (val) (exp (- val max-log-val))) log-vals))))
            max-log-val))))

 (define (log-normalize log-scores)
   (let* ([score-sum (apply log-sum-exp log-scores)])
     (map (lambda (score) (- score score-sum)) log-scores)))