(define (node-eval exp env)
  ((analyze exp) env))

(define (analyze exp)
  (cond [(quoted? exp) (analyze-quoted exp)]
        [(application? exp) (analyze-application exp)]
        [else (lambda (env) "analysis lost")]))
;;;quoted 
(define (quoted? exp)
  (tagged-list? exp 'quote))

(define (analyze-quoted exp)
  (let ((qval (text-of-quotation exp)))
    (lambda (env) qval)))

(define text-of-quotation second)

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (first exp) tag)
      #f))
;;;application
(define (application? exp) (pair? exp))

(define (analyze-application exp)
  (let ((fproc (analyze (operator exp)))
        (aprocs (map analyze (operands exp))))
    (lambda (env)
      (execute-application (fproc env)
                           (map (lambda (aproc) (aproc env))
                                aprocs)))))

(define operator first)

(define operands rest)

(define (execute-application proc args)
  (cond [(primitive-procedure? proc)
         (apply proc args)]
        ;; ((compound-procedure? proc)
        ;;  ((procedure-body proc)
        ;;   (extend-environment (procedure-parameters proc)
        ;;                       args
        ;;                       (procedure-environment proc))))
        [else
         (error
          "Unknown procedure type -- EXECUTE-APPLICATION"
          proc)]))

(define (primitive-procedure? proc)
  (tagged-list? proc 'primitive))

(define (apply-primitive-procedure proc args)
  (apply (primitive-implementation proc) args))

(define (primitive-implementation proc) (second proc))


  

