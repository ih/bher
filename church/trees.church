;;;node code
(define a 'a)
(define b 'b)
(define c 'c)
(define d 'd)
(define e 'e)

(define growth-noise .20)
(define label-noise .20)
(define labels '(a b c d e))

(define root '(a))

(define (node x . subtrees)
  (lambda ()
    (if (flip (- 1 growth-noise))
        (delete '() (pair (noisy-label x) subtrees))
        '())))

(define (noisy-label x)
  (if (flip (- 1 label-noise))
      x
      (uniform-draw labels)))


;;;tree grammar
(define (gen-program)
  (let* ([functions '()]
         [function-signatures '()]
         [body (gen-expr '() function-signatures)]
         [reset-symbols (reset-symbol-indizes!)])
    (combine-program-parts functions body)))
(define (combine-program-parts functions body)
  (lazy-append (lazy-append (lazy-list 'let '()) functions) (lazy-list body)))


(define (gen-expr vars function-signatures)
  (cond [(and (null? vars) (null? function-signatures))
         (sample gen-tree)]
        [else '()]))

(define (gen-tree)
  (let ([color (uniform-draw '(a b c d e))])
    (lazy-list 'node color)))

;;(eval (lazy-list->all-list (gen-program)))
