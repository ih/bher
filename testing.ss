(library (testing)
         (export test-expr trivial-expr)
         (import (except (rnrs) string-hash string-ci-hash)
                 (util)
                 (_srfi :1)
                 (_srfi :69)
                 (sym)
                 (pi abstract)
                 (util)
                 (church readable-scheme))

         (define (test-expr) '(let () (if (if #t #t #t) (if #t #t #t) (if #t #t #t))))
         ;;(define (test-expr) '(let () (define F1 (lambda (v1 v2) (F3))) (define F3 (lambda (v4 v6) (+ 2 2))) (define F2 (lambda () (+ a b))) 3))
         (define (trivial-expr) '(let () #t))

         ;; (define (normalize-names expr)
         ;;   (define ht (make-hash-table eqv?))
         ;;   (define (traverse action expr)
         ;;     (if (or (primitive? expr) (null? expr))
         ;;         (if (or (func? expr) (var? expr))
         ;;             (action expr)
         ;;             expr)
         ;;         (map (curry traverse action) expr)))
         ;;   ;;build table
         ;;   (define (add-to-table expr)
         ;;     (if (func? expr)
         ;;         (hash-table-set! ht expr (sym 'F))
         ;;         (hash-table-set! ht expr (sym 'v))))
         ;;   (define (relabel expr)
         ;;     (hash-table-ref ht expr))
         ;;   (reset-symbol-indizes!)
         ;;   (let* ([signatures (sexpr->signatures expr)])
         ;;     (traverse add-to-table signatures))

         ;;   ;;(pretty-print (hash-table->alist ht))
         ;;   (traverse relabel expr))
         )
         