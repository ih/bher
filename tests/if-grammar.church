(define (terminal t) (lambda () t))

(define EXPR
  (lambda ()
    (sample (multinomial (list IF BOOL) (list 1/4 3/4)))))
(define IF
  (lambda ()
    ;;(list 'if (EXPR) (EXPR) (EXPR))))
    (lazy-list 'if (EXPR) (EXPR) (EXPR))))
(define BOOL
  (lambda ()
    (sample  (uniform-draw (list (terminal 't) (terminal 'f))))))
(define lazy-program (EXPR))
(define program (first (lazy-list->list lazy-program 30)))

(pretty-print program)

;;(pretty-print (iota 2))
;;(lazy-equal? (lazy-list 'a (lazy-list 'b 'd) 'c) (list->lazy-list '(a (b d) c)) 10)
(define p '(if t f t))
(define scorer (make-scorer EXPR))

;;(pretty-print (lazy-list->list p))
(exp (scorer '() p))
(compute-depth (lazy-list 'if 't 'f 't))
(lazy-list->list (lazy-list 'if 't 'f 't) 10)
(iota 10)
;;(define proposer (make-proposer scorer))


;;(define init-state (make-initial-mcmc-state))
;;(define test-state (list (first init-state) (pair 't (lambda () '(if t (if f f f) t))) (third init-state)))

;;(pretty-print (mcmc-state->query-value test-state))
;;(exp (scorer '() (mcmc-state->query-value test-state)))

;;(proposer test-state)

;; (proposer 
;;(scorer '() (lazy-list 'if 't 'f 't))

