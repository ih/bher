;; (define (program-compression data)
;;   (let* ([all-examples (map tree->program data)]
;;          [prog (program->sexpr (beam-score-compression data (list 'uniform-draw (pair 'list all-examples)) 1))])
;;     (pretty-print (list "compressed-program:" prog "size: " (size prog)))
;;     (lambda () (eval prog))))

;;;searches through compressions of the sexpr (uniform-draw (list [observed data here])) , returns a thunk evaluates a uniforml draws over compressed forms of each observation
(define (learn-model data)
  (let* ([initial-sexpr (make-initial-sexpr data)]
         [learned-sexpr (beam-learn data initial-sexpr)]
         [model (lambda () (lazy-list->all-list (eval learned-sexpr)))])
    (pretty-print (list "compressed-program:" learned-sexpr "size: " (size learned-sexpr)))    
    model))

;;;turns each of the examples into a program then wraps that in a uniform draw
(define (make-initial-sexpr data)
  (let* ([literal-sexprs (map tree->program data)])
    (list 'uniform-draw (pair 'list literal-sexprs))))
         
(define (beam-learn data sexpr)
  sexpr)

(define (beam-learn-draft data sexpr)
  (iterated-compressions (lambda (progs) (best-n n (unique-programs progs))) program))
                         


;;(define (sort-by-score-and-size programs data)
  

  
  

