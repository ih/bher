(define (prototype) (node 'a (node 'b (node 'a (node 'b) (node 'b)))))

(define (two-node) (node 'a (node 'b)))

(define (gen-data model amount)
  (delete '() (repeat amount model)))




(define prototype-data (map lazy-list->all-list (gen-data prototype 5)))

;;(pretty-print prototype-data)



;;;learn-model tests
(member?-test "make-initial-sexpr evaluation" (lazy-list->all-list (eval (make-initial-sexpr (list '(a) '(a (b)))))) (list '(a) '(a (b))))

(member?-test "learned-model" (lazy-list->all-list ((learn-model '((a) (a (b)))))) '((a) (a (b))))


;;;sort-by-size-and-score tests
(define simplest-data (lazy-list 'a))
(define possible-programs (map (lambda (prog) (make-program '() prog)) (list '(uniform-draw (list (node 'a))) '(uniform-draw (list (node 'b))) '(uniform-draw (list (node 'a (node 'b)))))))

;;possible-programs
;;(scoring simplest-data '(node 'b) 10)
;;possible-programs
;;(map (lambda (prog) (scoring simplest-data prog 10)) possible-programs)
;;;test where growth noise is higher than label noise
(list-sort < '(3 6 1))
;;(weighted-list-sort  '((1 2) (3 4) (5 6)))
;;(equal?-test "sort-by-score-and-size simplest data" (sort-by-score-and-size possible-programs simplest-data) (list '(uniform-draw (node 'a)) '(uniform-draw (node 'a (node 'b))) '(uniform-draw (node 'b))))

;;(map lazy-list->all-list (map eval (map tree->program (map lazy-list->all-list (gen-data prototype 5)))))








